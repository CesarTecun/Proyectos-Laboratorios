import { Component, HostListener, ViewChild, ElementRef, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterOutlet, RouterLink, RouterLinkActive, Router, NavigationEnd } from '@angular/router';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { filter, map } from 'rxjs/operators';

// Import services
import { MessageService } from './services';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule, 
    RouterOutlet, 
    RouterLink, 
    RouterLinkActive
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  // Menu states
  isMenuOpen = false;
  isProfileMenuOpen = false;
  
  // User info
  userInfo = {
    name: 'Admin User',
    email: 'admin@example.com',
    get initials(): string {
      return this.name.split(' ').map(n => n[0]).join('').toUpperCase();
    }
  };
  
  // Notifications
  notifications: any[] = [];
  unreadNotifications = 0;
  
  // Loading state
  isLoading = false;
  
  // References to DOM elements
  @ViewChild('profileMenu') profileMenu!: ElementRef<HTMLElement>;

  constructor(
    private router: Router,
    private messageService: MessageService
  ) { 
    // Close menus when navigating
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe(() => {
      this.closeAllMenus();
      window.scrollTo(0, 0);
    });
  }

  ngOnInit(): void {
    this.loadNotifications();
  }

  // Load notifications
  private loadNotifications(): void {
    // In a real app, you would fetch this from a service
    this.notifications = [];
    this.unreadNotifications = 0;
  }

  // Close all dropdown menus
  closeAllMenus(): void {
    this.isMenuOpen = false;
    this.isProfileMenuOpen = false;
  }

  // Toggle mobile menu
  toggleMenu(): void {
    this.isMenuOpen = !this.isMenuOpen;
    if (this.isMenuOpen) {
      this.isProfileMenuOpen = false;
    }
  }

  // Toggle profile menu
  toggleProfileMenu(): void {
    this.isProfileMenuOpen = !this.isProfileMenuOpen;
    if (this.isProfileMenuOpen) {
      this.isMenuOpen = false;
    }
  }

  // Handle clicks outside menus
  @HostListener('document:click', ['$event'])
  onClickOutside(event: Event): void {
    const target = event.target as HTMLElement;
    if (this.profileMenu && !this.profileMenu.nativeElement.contains(target) && 
        !(target.closest('button') && target.closest('button')?.classList.contains('profile-button'))) {
      this.isProfileMenuOpen = false;
    }
  }

  // Handle window resize
  @HostListener('window:resize', ['$event'])
  onResize(): void {
    // Close mobile menu on large screens
    if (window.innerWidth >= 768) {
      this.closeAllMenus();
    }
  }

  // Handle escape key
  @HostListener('window:keydown.escape')
  onEscapeKey(): void {
    this.closeAllMenus();
  }

  // Navigation helper
  navigateTo(route: string, event?: Event): void {
    event?.preventDefault();
    this.router.navigate([route]);
    this.closeAllMenus();
  }
}
